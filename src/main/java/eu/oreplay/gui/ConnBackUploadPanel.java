/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package eu.oreplay.gui;

import com.fasterxml.jackson.databind.ObjectMapper;
import eu.oreplay.controller.EventController;
import eu.oreplay.gui.events.*;
import eu.oreplay.logic.FormsParameters;
import eu.oreplay.logic.connection.BasicStrings;
import eu.oreplay.logic.connection.UploadResponse;
import eu.oreplay.logic.converter.OReplayDataTransfer;
import eu.oreplay.utils.JUtils;
import eu.oreplay.utils.Utils;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;

/**
 *
 * @author javier.arufe
 */
public class ConnBackUploadPanel extends javax.swing.JPanel {
    private static java.util.ResourceBundle resMessages = java.util.ResourceBundle.getBundle("eu.oreplay.library.messages.Messages"); //$NON-NLS-1$;
    private ConnBackStatus oStatus = new ConnBackStatus();
    private java.util.List lListeners = new java.util.ArrayList();
    private String cFolder = "";
    private String cExtension = "";
    private boolean bRun = false;
    
    /**
     * Creates new form ConnBackUploadPanel
     */
    public ConnBackUploadPanel() {
        initComponents();
        this.setDefaultValues();
    }
    /**
     * Forces app language change
     * @param pcLocale String New language's initials
     */
    public void changeLanguage (String pcLocale) {
        java.util.Locale voLocale = new java.util.Locale(pcLocale);
        java.util.Locale.setDefault(voLocale);
        java.util.ResourceBundle.clearCache();
        resMessages = java.util.ResourceBundle.getBundle("eu.oreplay.library.messages.Messages", voLocale);
        //Change the texts
        lblTitle.setText("3. " + resMessages.getString("upload_data"));
        if (!bRun)
            btnUpload.setText(resMessages.getString("run"));
        else
            btnUpload.setText(resMessages.getString("stop"));
        lblFolder.setText(resMessages.getString("folder"));
        btnFolder.setText(resMessages.getString("browse"));
        lblExtension.setText(resMessages.getString("extension"));
    }
    public void initFormParameters(FormsParameters.ParConnBackUploadPanel poParam) {
        try {
            /*
            this.setBounds(poParam.getoPos().getnPosX(), 
                poParam.getoPos().getnPosY(), 
                poParam.getoPos().getnSizeX(),
                poParam.getoPos().getnSizeY());
            */
            cFolder = poParam.getcFolder();
            cExtension = poParam.getcExtension();
        }catch (Exception e) {
            JClientMain.getoLog().error(resMessages.getString("error_exception"), e);
        }
    }
    public void saveFormParameters() {
        try {
            //Read the parameters to store
            FormsParameters voPadre = new FormsParameters();
            FormsParameters.ParConnBackUploadPanel voParam = voPadre.new ParConnBackUploadPanel();
            /*
            voParam.getoPos().setnPosX(this.getX());
            voParam.getoPos().setnPosY(this.getY());
            voParam.getoPos().setnSizeX(this.getWidth());
            voParam.getoPos().setnSizeY(this.getHeight());
            */
            voParam.setcFolder(cFolder);
            voParam.setcExtension(cExtension);
            //Calls the method in the main form to receive and to store the parameters
            JClientMain.updateFormsParameters("ConnBackUploadPanel", voParam);
        } catch(Exception e) {
            JClientMain.getoLog().error(resMessages.getString("error_exception"), e);
        }                
    }
    public void initialize (ConnBackStatus poStatus) {
        oStatus = poStatus;
        this.setDefaultValues();
    }
    public ConnBackStatus getoStatus() {
        return oStatus;
    }
    public void setoStatus(ConnBackStatus oStatus) {
        this.oStatus = oStatus;
    }
    public synchronized void addEventListener (ConnBackListener poListener) {
        lListeners.add(poListener);
    }
    public synchronized void removeEventListener (ConnBackListener poListener) {
        lListeners.remove(poListener);
    }
    public synchronized void fireEvent() {
        ConnBackEvent oEvt = new ConnBackEvent (this, oStatus);
        java.util.Iterator i = lListeners.iterator();
        while (i.hasNext()) {
            ((ConnBackListener) i.next()).handleConnBackEvent(oEvt);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        scrStatus = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextArea();
        lblFolder = new javax.swing.JLabel();
        txtFolder = new javax.swing.JTextField();
        btnFolder = new javax.swing.JButton();
        lblExtension = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstExtensions = new javax.swing.JList<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(500, 250));
        setPreferredSize(new java.awt.Dimension(500, 250));

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitle.setText("3. " + resMessages.getString("upload_data"));

        btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_start.png"))); // NOI18N
        btnUpload.setText(resMessages.getString("run"));
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        txtStatus.setEditable(false);
        txtStatus.setColumns(20);
        txtStatus.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        txtStatus.setRows(5);
        scrStatus.setViewportView(txtStatus);

        lblFolder.setBackground(new java.awt.Color(255, 255, 255));
        lblFolder.setText(resMessages.getString("folder"));

        txtFolder.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N

        btnFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_browse.png"))); // NOI18N
        btnFolder.setText(resMessages.getString("browse"));
        btnFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderActionPerformed(evt);
            }
        });

        lblExtension.setBackground(new java.awt.Color(255, 255, 255));
        lblExtension.setText(resMessages.getString("extension"));

        lstExtensions.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        lstExtensions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "csv", "xml", "htm", "html" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstExtensions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstExtensions.setToolTipText("");
        lstExtensions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstExtensionsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstExtensions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFolder))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpload, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblFolder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFolder, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblExtension)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:
        this.startStopUpload();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFolderActionPerformed
        // TODO add your handling code here:
        this.selectFileForReading();
    }//GEN-LAST:event_btnFolderActionPerformed

    private void lstExtensionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstExtensionsValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting())
            this.extensionSelected();
    }//GEN-LAST:event_lstExtensionsValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFolder;
    private javax.swing.JButton btnUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblExtension;
    private javax.swing.JLabel lblFolder;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList<String> lstExtensions;
    private javax.swing.JScrollPane scrStatus;
    private javax.swing.JTextField txtFolder;
    private javax.swing.JTextArea txtStatus;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets default values
     */
    public void setDefaultValues() {
        txtFolder.setText("");
        lstExtensions.clearSelection();
        txtFolder.setEnabled(false);
        lstExtensions.setEnabled(false);
        btnFolder.setEnabled(false);
        btnUpload.setEnabled(false);
        txtStatus.setText(resMessages.getString("waiting") + "\n");
        btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_start.png"))); // NOI18N
        btnUpload.setText(resMessages.getString("run"));
        bRun = false;
    }
    /**
     * Allows to start/stop upload
     */
    public void enableForUpload() {
        txtFolder.setText(cFolder);
        if (!cExtension.equals(""))
            lstExtensions.setSelectedValue(cExtension, true);
        else
            lstExtensions.setSelectedIndex(1);
        txtFolder.setEnabled(true);
        lstExtensions.setEnabled(true);
        btnFolder.setEnabled(true);
        btnUpload.setEnabled(true);
        btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_start.png"))); // NOI18N
        btnUpload.setText(resMessages.getString("run"));
        bRun = false;
    }
    /**
     * Toogles between uploading or not
     */
    private void startStopUpload() {
        if (bRun) {
            btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_start.png"))); // NOI18N
            btnUpload.setText(resMessages.getString("run"));
            txtStatus.insert(resMessages.getString("info_upload_stopped") + "\n", 0);
            txtStatus.setCaretPosition(0);
            bRun = !bRun;
        } else {
            if (oStatus.isReadyToSend() && Utils.folderExists(cFolder) && 
                    !cExtension.equals("")) {
                btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_stop.png"))); // NOI18N
                btnUpload.setText(resMessages.getString("stop"));
                txtStatus.insert(resMessages.getString("info_upload_started") + "\n", 0);
                txtStatus.setCaretPosition(0);
                //Fire the event to notify starting the upload
                oStatus.setnStatus(ConnBackStatus.UPLOAD_ON);
                fireEvent();
                //Change the running flag
                bRun = !bRun;
                //Starts the upload process in a separated thread using a SwingWorker
                this.uploadThread();
            }
        }
    }
    /**
     * When the user clics the button, it allows to select a source folder for processing files
     */
    public void selectFileForReading() {
        try {
            String vcFile = JUtils.selectDirectory(null, cFolder);
            if (vcFile!=null) {
                cFolder = JUtils.getcCurDir();
                txtFolder.setText(cFolder);
            } else {
                txtFolder.setText("");
            }
        } catch (Exception e) {
            JClientMain.getoLog().error(resMessages.getString("error_exception"), e);
        }
    }
    /**
     * When a user selects an extension type from the list, set the current value
     */
    private void extensionSelected () {
        int vnRow = lstExtensions.getSelectedIndex();
        if (vnRow>=0 && vnRow<4) {
            //Fire the event
            cExtension = lstExtensions.getModel().getElementAt(vnRow);
        }
    }
 
    /**
     * Performs a simple query to the server to know if it's ready to receive communications
     * There can be several servers; the execution is inside a SwingWorker to be able
     * to refresh status messages in the GUI as the requests are done
     */
    private void uploadThread() 
    { 
        SwingWorker voSw = new SwingWorker() { 
            // Method to perform tasks in background and free the GUI to refresh data
            @Override
            protected String doInBackground() 
                throws Exception { 
                String vcServer = "";
                String vcResul = "";
                boolean vbFound = false;
                //Iterate until the thread is stopped
                while (bRun) {
                    try {
                        //First, find a file with the given extension located at the given folder
                        String vcFile = Utils.findFirstFileInDir(cFolder, cExtension, false);
                        if (vcFile!=null) {
                            //Second, parse the contents to generate a JSON
                            OReplayDataTransfer voTransf = new OReplayDataTransfer();
                            String vcJson = voTransf.getJsonFromFile(vcFile);
                            //Communication with backend
                            if (!vcJson.toLowerCase().startsWith("error")) {
                                //Third, send the contents to the backend
                                vbFound = false;
                                //Gets an HTTP Client to make a request
                                HttpClient voClient = HttpClient.newBuilder()
                                    .connectTimeout(Duration.ofSeconds(5))
                                    .build();
                                //Sets the request to the current server
                                HttpRequest voReq = HttpRequest.newBuilder()
                                    .POST(HttpRequest.BodyPublishers.ofString(vcJson))
                                    .uri(new URI(oStatus.getcServer() + 
                                            "/api/v1/events/" + oStatus.getcEveId() + "/uploads"))
                                    .header("Authorization", "Bearer " + oStatus.getcToken())
                                    .header("Content-Type", "application/json")
                                    .header("Accept", "application/json")
                                    .build();
                                //Sends the request an gets the response
                                HttpResponse<String> voResp = voClient.send(voReq, BodyHandlers.ofString());
                                //If there is a correct response, finish the process to fire the event
                                if (voResp.statusCode()==200) {
                                    try {
                                        //First, parse the response (a list of strings with data)
                                        String vcContents = voResp.body();
                                        //JSON file with Jackson
                                        ObjectMapper voMapper = new ObjectMapper();
                                        UploadResponse voData = voMapper.readValue(vcContents, UploadResponse.class);
                                        //If there are data, get the human readable strings
                                        if (voData!=null) {
                                            if (voData.getoMeta()!=null) {
                                                if (voData.getoMeta().getlHuman()!=null) {
                                                    if (voData.getoMeta().getlHuman().size()>0) {
                                                        for (int i=0; i<voData.getoMeta().getlHuman().size(); i++) {
                                                            String vcData = voData.getoMeta().getlHuman().get(i);
                                                            //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                                            publish(vcData + "\n");
                                                        }
                                                        vbFound = true;
                                                    }
                                                }
                                            }
                                        }
                                    }catch (Exception eParseResp) {
                                        eParseResp.printStackTrace();
                                        vbFound = false;
                                    }
                                    if (!vbFound) {
                                        //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                        publish(resMessages.getString("info_data_saved_error") + "\n");
                                    }
                                } else {
                                    //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                    publish(resMessages.getString("info_connection_nook") + " - " + voResp.statusCode() + "\n");
                                }
                            } else {
                                //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                publish(resMessages.getString("error_format_unknown") + "\n");
                            }
                            //Before communicating with the backend, delete the file
                            Utils.deleteFile(vcFile);
                        }
                    } catch (Exception eNet) {
                        eNet.printStackTrace();
                        //This calls the method "process" in the SwingWorker, to set a status text in the panel
                        publish(resMessages.getString("info_connection_nook") + "\n");
                    }
                    //Waits 0.5 seconds to let the system breathe
                    Thread.sleep(Duration.ofMillis(500));
                }
                return "done"; 
            } 
            // Method called when using "publish" in the doInBackground, to refresh the GUI with new data
            @Override protected void process(java.util.List plChunks) 
            { 
                if (plChunks!=null) {
                    for (int i=0; i<plChunks.size(); i++) {
                        String vcValue = (String)plChunks.get(i); 
                        txtStatus.insert(vcValue, 0);
                        txtStatus.setCaretPosition(0);
                    }
                }
            }   
            // Method called when doInBackground finishes
            @Override protected void done() 
            { 
                try { 
                    //Get the message from doInBackground. In this case, it`s a String
                    String vcMsg = (String)get(); 
                    if (!vcMsg.equals("")) {
                        //Fire the event
                        oStatus.setnStatus(ConnBackStatus.UPLOAD_OFF);
                        fireEvent();
                    }
                } 
                catch (InterruptedException e) { 
                    e.printStackTrace(); 
                } 
                catch (ExecutionException e) { 
                    e.printStackTrace(); 
                } 
            } 
        }; 
        // Executes the swingworker on worker thread 
        voSw.execute(); 
    }     
    
}
