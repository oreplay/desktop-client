/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package eu.oreplay.gui;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import eu.oreplay.logic.converter.ConverterCsvOEToModel;
import eu.oreplay.logic.converter.ConverterIofToModel;
import eu.oreplay.logic.converter.ConverterToModel;
import eu.oreplay.logic.converter.OReplayDataTransfer;
import eu.oreplay.logic.iof.ResultList;
import eu.oreplay.logic.iof.StartList;
import eu.oreplay.utils.JUtils;
import eu.oreplay.utils.Utils;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import javax.xml.bind.JAXBContext;
import org.apache.commons.io.input.BOMInputStream;

/**
 * Basic test form to inspect files, their contents and getting JSON exchange data
 * @author javier.arufe
 */
public class JTest extends javax.swing.JDialog {
    private java.util.ResourceBundle resMessages = java.util.ResourceBundle.getBundle("eu.oreplay.library.messages.Messages"); //$NON-NLS-1$;
    ConverterToModel oConv = null;
    
    /**
     * Creates new form JAbout
     */
    public JTest(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.getContentPane().setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(parent.getX()+50, parent.getY()+50, 
                (int)this.getPreferredSize().getWidth(), (int)this.getPreferredSize().getHeight()));
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSource = new javax.swing.JPanel();
        lblSrcFile = new javax.swing.JLabel();
        txtSrcFile = new javax.swing.JTextField();
        btnSrcFile = new javax.swing.JButton();
        lblDstFile = new javax.swing.JLabel();
        txtDstFile = new javax.swing.JTextField();
        btnDstFile = new javax.swing.JButton();
        pnlInfo = new javax.swing.JPanel();
        lblExtension = new javax.swing.JLabel();
        chkExists = new javax.swing.JCheckBox();
        chkUtf = new javax.swing.JCheckBox();
        chkKnown = new javax.swing.JCheckBox();
        txtExtension = new javax.swing.JTextField();
        lblContents = new javax.swing.JLabel();
        txtContents = new javax.swing.JTextField();
        lblSource = new javax.swing.JLabel();
        txtSource = new javax.swing.JTextField();
        lblIof = new javax.swing.JLabel();
        txtIof = new javax.swing.JTextField();
        lblResults = new javax.swing.JLabel();
        txtResults = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        btnAccept = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        pnlSource.setBackground(new java.awt.Color(255, 255, 255));

        lblSrcFile.setBackground(new java.awt.Color(255, 255, 255));
        lblSrcFile.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblSrcFile.setText(resMessages.getString("src_file"));

        txtSrcFile.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N

        btnSrcFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_browse.png"))); // NOI18N
        btnSrcFile.setText(resMessages.getString("browse"));
        btnSrcFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrcFileActionPerformed(evt);
            }
        });

        lblDstFile.setBackground(new java.awt.Color(255, 255, 255));
        lblDstFile.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblDstFile.setText(resMessages.getString("dst_file"));

        txtDstFile.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N

        btnDstFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_browse.png"))); // NOI18N
        btnDstFile.setText(resMessages.getString("browse"));
        btnDstFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDstFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSourceLayout = new javax.swing.GroupLayout(pnlSource);
        pnlSource.setLayout(pnlSourceLayout);
        pnlSourceLayout.setHorizontalGroup(
            pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSourceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSourceLayout.createSequentialGroup()
                        .addComponent(lblSrcFile, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSrcFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSrcFile))
                    .addGroup(pnlSourceLayout.createSequentialGroup()
                        .addComponent(lblDstFile, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDstFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDstFile)))
                .addContainerGap())
        );
        pnlSourceLayout.setVerticalGroup(
            pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSourceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSrcFile, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                        .addComponent(btnSrcFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblSrcFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSourceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDstFile, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDstFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDstFile))
                .addGap(41, 41, 41))
        );

        pnlInfo.setBackground(new java.awt.Color(255, 255, 255));

        lblExtension.setBackground(new java.awt.Color(255, 255, 255));
        lblExtension.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblExtension.setText(resMessages.getString("extension"));
        lblExtension.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        chkExists.setBackground(new java.awt.Color(255, 255, 255));
        chkExists.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        chkExists.setText(resMessages.getString("exists"));

        chkUtf.setBackground(new java.awt.Color(255, 255, 255));
        chkUtf.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        chkUtf.setText(resMessages.getString("utf"));

        chkKnown.setBackground(new java.awt.Color(255, 255, 255));
        chkKnown.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        chkKnown.setText(resMessages.getString("known_data"));

        txtExtension.setFont(new java.awt.Font("Gabriola", 0, 14)); // NOI18N

        lblContents.setBackground(new java.awt.Color(255, 255, 255));
        lblContents.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblContents.setText(resMessages.getString("contents"));
        lblContents.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txtContents.setFont(new java.awt.Font("Gabriola", 0, 14)); // NOI18N

        lblSource.setBackground(new java.awt.Color(255, 255, 255));
        lblSource.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblSource.setText(resMessages.getString("source"));
        lblSource.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txtSource.setFont(new java.awt.Font("Gabriola", 0, 14)); // NOI18N

        lblIof.setBackground(new java.awt.Color(255, 255, 255));
        lblIof.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblIof.setText(resMessages.getString("iof_version"));
        lblIof.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txtIof.setFont(new java.awt.Font("Gabriola", 0, 14)); // NOI18N

        lblResults.setBackground(new java.awt.Color(255, 255, 255));
        lblResults.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        lblResults.setText(resMessages.getString("results_type"));
        lblResults.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txtResults.setFont(new java.awt.Font("Gabriola", 0, 14)); // NOI18N

        lblStatus.setBackground(new java.awt.Color(255, 255, 255));
        lblStatus.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlInfoLayout.createSequentialGroup()
                        .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInfoLayout.createSequentialGroup()
                                .addComponent(chkExists, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(chkUtf, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(chkKnown, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInfoLayout.createSequentialGroup()
                                .addComponent(lblSource, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSource, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(pnlInfoLayout.createSequentialGroup()
                                    .addComponent(lblContents, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtContents, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblResults, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtResults, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlInfoLayout.createSequentialGroup()
                                    .addComponent(lblExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(lblIof, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtIof, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkExists)
                    .addComponent(chkUtf)
                    .addComponent(chkKnown))
                .addGap(21, 21, 21)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblIof, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtIof, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblResults, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblContents, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtContents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSource, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlButtons.setBackground(new java.awt.Color(255, 255, 255));

        btnAccept.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        btnAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_yes.png"))); // NOI18N
        btnAccept.setText(resMessages.getString("accept"));
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Garamond", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_no.png"))); // NOI18N
        btnCancel.setText(resMessages.getString("cancel"));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlButtonsLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAccept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        this.processFile();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSrcFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrcFileActionPerformed
        // TODO add your handling code here:
        this.selectFileForReading();
    }//GEN-LAST:event_btnSrcFileActionPerformed

    private void btnDstFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDstFileActionPerformed
        // TODO add your handling code here:
        this.selectFileForWriting();
    }//GEN-LAST:event_btnDstFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JTest dialog = new JTest(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDstFile;
    private javax.swing.JButton btnSrcFile;
    private javax.swing.JCheckBox chkExists;
    private javax.swing.JCheckBox chkKnown;
    private javax.swing.JCheckBox chkUtf;
    private javax.swing.JLabel lblContents;
    private javax.swing.JLabel lblDstFile;
    private javax.swing.JLabel lblExtension;
    private javax.swing.JLabel lblIof;
    private javax.swing.JLabel lblResults;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblSrcFile;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlSource;
    private javax.swing.JTextField txtContents;
    private javax.swing.JTextField txtDstFile;
    private javax.swing.JTextField txtExtension;
    private javax.swing.JTextField txtIof;
    private javax.swing.JTextField txtResults;
    private javax.swing.JTextField txtSource;
    private javax.swing.JTextField txtSrcFile;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets field values by default
     */
    public void cleanMetadata () {
        chkExists.setSelected(false);
        chkKnown.setSelected(false);
        chkUtf.setSelected(false);
        txtExtension.setText("");
        txtContents.setText("");
        txtResults.setText("");
        txtSource.setText("");
        txtIof.setText("");
    }
    /**
     * When the user clics the button, it allows to select a source file for reading
     */
    public void selectFileForReading() {
        try {
            String vcFile = JUtils.selectFile(this, ".", 
                    new String[] {"csv", "xml", "htm", "html"}, ".csv, .xml, .htm, .html", true);
            if (vcFile!=null) {
                txtSrcFile.setText(vcFile);
            } else {
                txtSrcFile.setText("");
            }
            //Pre-process the type of file to show its metadata
            if (!txtSrcFile.getText().equals("")) {
                this.preProcessFile(vcFile);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * When the user clics the button, it allows to select a destination file for writing
     */
    public void selectFileForWriting() {
        try {
            String vcFile = JUtils.selectFile(this, ".", 
                    new String[] {"json"}, ".json", false);
            if (vcFile!=null) {
                txtDstFile.setText(vcFile);
            } else {
                txtDstFile.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * Performs the previous tasks to parse the source file and fill its metadata
     * @param pcFile String path+name of the source file
     */
    public void preProcessFile(String pcFile) {
        //Clean previous values of the metadata
        this.cleanMetadata();
        //Opens and tries to parse the source file
        File voFile = new File(pcFile);
        oConv = new ConverterIofToModel();
        oConv.inspectFile(voFile);
        if (oConv.getcExtension().equals(ConverterToModel.EXT_CSV)) {
            oConv = new ConverterCsvOEToModel(oConv);
        } else if (oConv.getcExtension().equals(ConverterToModel.EXT_XML)) {
            oConv = new ConverterIofToModel(oConv);
        }
        //Show the results
        chkExists.setSelected(oConv.isbExists());
        chkKnown.setSelected(oConv.isbKnownData());
        chkUtf.setSelected(oConv.isbUtf());
        txtExtension.setText(oConv.getcExtension());
        txtContents.setText(resMessages.getString(oConv.getcContents().toLowerCase()));
        if (oConv.getcResultsType().equals(ConverterToModel.CONTENTS_RESULT))
            txtResults.setText(resMessages.getString(oConv.getcResultsType().toLowerCase()));
        else
            txtResults.setText("");
        txtSource.setText(oConv.getcSource());
        if (oConv.getcExtension().equals(ConverterToModel.EXT_XML))
            txtIof.setText(oConv.getcIofVersion());
        else
            txtIof.setText("");
    }
    /**
     * Performs the tasks to generate the output JSON
     */
    public void processFile() {
        eu.oreplay.db.Event voEve = null;
        try {
            //If a source file has been inspected and a destination file has value, process it
            if (oConv!=null && !txtDstFile.getText().equals("")) {
                if (oConv.isbExists()) {
                    //If XML, obtain ResultList or StartList
                    if (oConv.getcExtension().equals(ConverterToModel.EXT_XML) && 
                            oConv.getcIofVersion().equals(ConverterToModel.IOF_VERSION_3)) {
                        if (oConv.getcContents().equals(ConverterToModel.CONTENTS_RESULT)) {
                            //Not supported this conversion yet
                            lblStatus.setText(resMessages.getString("info_not_supported"));
                        } else if (oConv.getcContents().equals(ConverterToModel.CONTENTS_START)) {
                            //Creates a dummy event with one stage
                            eu.oreplay.db.Event voSrcEve = Utils.createDummyEventOneStage();
                            voEve = oConv.convertStartListSingleStageClassic(oConv.getcFile(), 
                                    voSrcEve.getId(), voSrcEve.getStageList().get(0).getId());
                        } else {
                            lblStatus.setText(resMessages.getString("info_not_supported"));
                        }
                    //If CSV, parse contents
                    } else if (oConv.getcExtension().equals(ConverterToModel.EXT_CSV)) {
                        if (oConv.getcContents().equals(ConverterToModel.CONTENTS_RESULT)) {
                            //Not supported this conversion yet
                            lblStatus.setText(resMessages.getString("info_not_supported"));
                        } else if (oConv.getcContents().equals(ConverterToModel.CONTENTS_START)) {
                            //Gets an encoding for the text file depending on the UTF mark
                            String vcEncoding = (oConv.isbUtf()?Utils.ENCODING_UTF_8:Utils.ENCODING_ISO_8859_1);
                            //Creates a dummy event with one stage
                            eu.oreplay.db.Event voSrcEve = Utils.createDummyEventOneStage();
                            //Set the specific properties for CSV
                            ((ConverterCsvOEToModel)oConv).setSpecificProperties(";", vcEncoding, voSrcEve);
                            //Parses the contents
                            voEve = oConv.convertStartListSingleStageClassic(oConv.getcFile(), 
                                    voSrcEve.getId(), voSrcEve.getStageList().get(0).getId());
                        } else {
                            lblStatus.setText(resMessages.getString("info_not_supported"));
                        }
                    } else {
                        lblStatus.setText(resMessages.getString("info_not_supported"));
                    }
                    //Creates the output in JSON by merging metadata and event
                    if (voEve!=null) {
                        //---- Final steps, write the output ---
                        //Object to group configuration and event
                        OReplayDataTransfer voData = new OReplayDataTransfer(oConv, voEve);
                        //JSON file with Jackson
                        ObjectMapper voMapper = new ObjectMapper();
                        voMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);
                        String vcJson = voMapper.writerWithDefaultPrettyPrinter().writeValueAsString(voData);
                        BufferedWriter voWriter = new BufferedWriter(new FileWriter(txtDstFile.getText()));
                        voWriter.write(vcJson);
                        voWriter.close();
                        //Write a text in the status label
                        lblStatus.setText(resMessages.getString("info_process_finished"));
                    } else {
                        lblStatus.setText(resMessages.getString("info_nothing_to_do"));
                    }
                } else {
                    lblStatus.setText(resMessages.getString("info_nothing_to_do"));
                }
            } else {
                lblStatus.setText(resMessages.getString("info_nothing_to_do"));
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
}
