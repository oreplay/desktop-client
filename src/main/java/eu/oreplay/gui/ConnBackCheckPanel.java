/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package eu.oreplay.gui;

import com.fasterxml.jackson.databind.ObjectMapper;
import eu.oreplay.gui.events.*;
import eu.oreplay.logic.FormsParameters;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;

/**
 *
 * @author javier.arufe
 */
public class ConnBackCheckPanel extends javax.swing.JPanel {
    private static java.util.ResourceBundle resMessages = java.util.ResourceBundle.getBundle("eu.oreplay.library.messages.Messages"); //$NON-NLS-1$;
    private ConnBackStatus oStatus = new ConnBackStatus();
    private java.util.List lListeners = new java.util.ArrayList();
    private java.util.List<String> lServers = new java.util.ArrayList<String>();
    
    /**
     * Creates new form ConnBackCheckPanel
     */
    public ConnBackCheckPanel() {
        initComponents();
        this.setDefaultValues();
    }
    /**
     * Forces app language change
     * @param pcLocale String New language's initials
     */
    public void changeLanguage (String pcLocale) {
        java.util.Locale voLocale = new java.util.Locale(pcLocale);
        java.util.Locale.setDefault(voLocale);
        java.util.ResourceBundle.clearCache();
        resMessages = java.util.ResourceBundle.getBundle("eu.oreplay.library.messages.Messages", voLocale);
        //Change the texts
        lblTitle.setText("1. " + resMessages.getString("check_connection"));
        btnProcess.setText(resMessages.getString("btn_check"));
        btnProcess.setToolTipText(resMessages.getString("tooltip_check_connection"));
    }
    public void initFormParameters(FormsParameters.ParConnBackCheckPanel poParam) {
        try {
            /*
            this.setBounds(poParam.getoPos().getnPosX(), 
                poParam.getoPos().getnPosY(), 
                poParam.getoPos().getnSizeX(),
                poParam.getoPos().getnSizeY());
            */
            lServers = poParam.getlServers();
        }catch (Exception e) {
            JClientMain.getoLog().error(resMessages.getString("error_exception"), e);
        }
    }
    public void saveFormParameters() {
        try {
            //Read the parameters to store
            FormsParameters voPadre = new FormsParameters();
            FormsParameters.ParConnBackCheckPanel voParam = voPadre.new ParConnBackCheckPanel();
            /*
            voParam.getoPos().setnPosX(this.getX());
            voParam.getoPos().setnPosY(this.getY());
            voParam.getoPos().setnSizeX(this.getWidth());
            voParam.getoPos().setnSizeY(this.getHeight());
            */
            voParam.setlServers(lServers);
            //Calls the method in the main form to receive and to store the parameters
            JClientMain.updateFormsParameters("ConnBackCheckPanel", voParam);
        } catch(Exception e) {
            JClientMain.getoLog().error(resMessages.getString("error_exception"), e);
        }                
    }
    public void initialize (ConnBackStatus poStatus) {
        oStatus = poStatus;
        this.setDefaultValues();
    }
    public ConnBackStatus getoStatus() {
        return oStatus;
    }
    public void setoStatus(ConnBackStatus oStatus) {
        this.oStatus = oStatus;
    }
    public synchronized void addEventListener (ConnBackListener poListener) {
        lListeners.add(poListener);
    }
    public synchronized void removeEventListener (ConnBackListener poListener) {
        lListeners.remove(poListener);
    }
    public synchronized void fireEvent() {
        ConnBackEvent oEvt = new ConnBackEvent (this, oStatus);
        java.util.Iterator i = lListeners.iterator();
        while (i.hasNext()) {
            ((ConnBackListener) i.next()).handleConnBackEvent(oEvt);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnProcess = new javax.swing.JButton();
        scrStatus = new javax.swing.JScrollPane();
        txtStatus = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(300, 200));
        setPreferredSize(new java.awt.Dimension(300, 200));

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitle.setText("1. " + resMessages.getString("check_connection"));

        btnProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn_refresh.png"))); // NOI18N
        btnProcess.setText(resMessages.getString("btn_check"));
        btnProcess.setToolTipText(resMessages.getString("tooltip_check_connection"));
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        txtStatus.setEditable(false);
        txtStatus.setColumns(20);
        txtStatus.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        txtStatus.setRows(5);
        scrStatus.setViewportView(txtStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrStatus)
                        .addContainerGap())
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 158, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        this.checkConnectionThread();
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrStatus;
    private javax.swing.JTextArea txtStatus;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets default values
     */
    private void setDefaultValues() {
        txtStatus.setText(resMessages.getString("info_waiting_connection") + "\n");
    }
    
    /**
     * Performs a simple query to the server to know if it's ready to receive communications
     * There can be several servers; the execution is inside a SwingWorker to be able
     * to refresh status messages in the GUI as the requests are done
     */
    private void checkConnectionThread() 
    { 
        SwingWorker voSw = new SwingWorker() { 
            // Method to perform tasks in background and free the GUI to refresh data
            @Override
            protected String doInBackground() 
                throws Exception { 
                String vcServer = "";
                String vcResul = "";
                boolean vbFound = false;
                //Iterate the list of servers and try to get a response from one of them
                if (lServers!=null) {
                    int i = 0;
                    while (i<lServers.size() && !vbFound) {
                        vcServer = lServers.get(i);
                        if (!vcServer.equals("")) {
                            //If it's only a server name without protocol, adds https at the beguining
                            if (!vcServer.toLowerCase().startsWith("http://") && 
                                    !vcServer.toLowerCase().startsWith("https://")) {
                                vcServer = "https://" + vcServer;
                            }
                            try {
                                //Gets an HTTP Client to make a request
                                HttpClient voClient = HttpClient.newBuilder()
                                    .connectTimeout(Duration.ofSeconds(5))
                                    .build();
                                //Sets the request to the current server
                                HttpRequest voReq = HttpRequest.newBuilder()
                                    .GET()
                                    .uri(new URI(vcServer + "/api/v1/ping/pong"))
                                    .build();
                                //Sends the request an gets the response
                                HttpResponse<String> voResp = voClient.send(voReq, BodyHandlers.ofString());
                                //If there is a correct response, finish the process to fire the event
                                if (voResp.statusCode()==200) {
                                    //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                    publish(vcServer + " - " + resMessages.getString("info_connection_ok") + "\n");
                                    //Show the ok message in the status area
                                    vbFound = true;
                                } else {
                                    //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                    publish(vcServer + " - " + resMessages.getString("info_connection_nook") + " - " + voResp.statusCode() + "\n");
                                }
                            } catch (Exception eNet) {
                                //This calls the method "process" in the SwingWorker, to set a status text in the panel
                                publish(vcServer + " - " + resMessages.getString("info_connection_nook") + "\n");
                            }
                        }
                        i++;
                    }
                }
                if (vbFound)
                    vcResul = vcServer;
                return vcResul; 
            } 
            // Method called when using "publish" in the doInBackground, to refresh the GUI with new data
            @Override protected void process(java.util.List plChunks) 
            { 
                String vcValue = (String)plChunks.get(plChunks.size() - 1); 
                txtStatus.insert(vcValue, 0);
                txtStatus.setCaretPosition(0);
            }   
            // Method called when doInBackground finishes
            @Override protected void done() 
            { 
                try { 
                    //Get the message from doInBackground. In this case, it`s a String with the name of the server that responded to the request
                    String vcServer = (String)get(); 
                    if (!vcServer.equals("")) {
                        //Fire the event
                        oStatus.setcServer(vcServer);
                        oStatus.setnStatus(ConnBackStatus.CONNECTION_OK);
                        fireEvent();
                    } else {
                        txtStatus.insert(resMessages.getString("info_process_finished") + ". " + 
                                resMessages.getString("info_connection_nook") + "\n", 0);
                        txtStatus.setCaretPosition(0);
                    }
                } 
                catch (InterruptedException e) { 
                    e.printStackTrace(); 
                } 
                catch (ExecutionException e) { 
                    e.printStackTrace(); 
                } 
            } 
        }; 
        // Executes the swingworker on worker thread 
        voSw.execute(); 
    }     
}
